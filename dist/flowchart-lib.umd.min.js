/*! FlowchartLib v1.0.0 | MIT License */
/*!
 * FlowchartLib v1.0.0
 * (c) 2025
 * @license MIT
 */
!function(t,e){"function"==typeof define&&define.amd?define(["jszip"],e):"object"==typeof module&&module.exports?module.exports=e(require("jszip")):t.FlowchartLib=e(t.JSZip)}("undefined"!=typeof self?self:this,function(t){"use strict";"undefined"!=typeof window&&!window.JSZip&&t&&(window.JSZip=t);class Node{constructor(t,e,i,o,s=""){this.id=t,this.type=e,this.x=i,this.y=o,this.text=s,this.width=120,this.height=60,this.selected=!1,this.link="",this.fillColor="#FFFFFF",this.fontColor="#000000",this.fontSize=14,this.outlineColor="#000000",this.outlineWidth=2}containsPoint(t,e){return t>=this.x-this.width/2&&t<=this.x+this.width/2&&e>=this.y-this.height/2&&e<=this.y+this.height/2}isOnConnectionPoint(t,e,i=1){const o=this.getConnectionPoints(),s=10/i;for(let i of o)if(Math.sqrt((t-i.x)**2+(e-i.y)**2)<s)return i;return null}isOnResizeHandle(t,e,i=1){const o=this.getResizeHandles(),s=8/i;for(let i of o)if(Math.sqrt((t-i.x)**2+(e-i.y)**2)<s)return i;return null}getConnectionPoints(){return[{x:this.x,y:this.y-this.height/2,position:"top"},{x:this.x+this.width/2,y:this.y,position:"right"},{x:this.x,y:this.y+this.height/2,position:"bottom"},{x:this.x-this.width/2,y:this.y,position:"left"}]}getClosestConnectionPoint(t,e){const i=this.getConnectionPoints();let o=i[0],s=1/0;for(let n of i){const i=Math.sqrt((t-n.x)**2+(e-n.y)**2);i<s&&(s=i,o=n)}return o}getResizeHandles(){const t=this.x-this.width/2,e=this.x+this.width/2,i=this.y-this.height/2,o=this.y+this.height/2;return[{x:t,y:i,position:"top-left"},{x:e,y:i,position:"top-right"},{x:e,y:o,position:"bottom-right"},{x:t,y:o,position:"bottom-left"}]}updateSettings(t){void 0!==t.text&&(this.text=t.text),void 0!==t.link&&(this.link=t.link),void 0!==t.fillColor&&(this.fillColor=t.fillColor),void 0!==t.fontColor&&(this.fontColor=t.fontColor),void 0!==t.fontSize&&(this.fontSize=t.fontSize),void 0!==t.outlineColor&&(this.outlineColor=t.outlineColor),void 0!==t.outlineWidth&&(this.outlineWidth=t.outlineWidth)}getSettings(){return{text:this.text,link:this.link,fillColor:this.fillColor,fontColor:this.fontColor,fontSize:this.fontSize,outlineColor:this.outlineColor,outlineWidth:this.outlineWidth}}draw(t,e=!1){switch(t.save(),t.fillStyle=this.fillColor,t.strokeStyle=e?"#2196F3":this.outlineColor,t.lineWidth=e?3:this.outlineWidth,this.type){case"start":case"end":this.drawRounded(t);break;case"process":default:this.drawRectangle(t);break;case"decision":this.drawDiamond(t)}this.drawText(t),this.drawConnectionPoints(t),e&&(this.drawSelectionOutline(t),this.drawResizeHandles(t)),t.restore()}drawRounded(t){const e=this.x-this.width/2,i=this.y-this.height/2,o=this.height/2;t.beginPath(),t.moveTo(e+o,i),t.lineTo(e+this.width-o,i),t.arcTo(e+this.width,i,e+this.width,i+o,o),t.lineTo(e+this.width,i+this.height-o),t.arcTo(e+this.width,i+this.height,e+this.width-o,i+this.height,o),t.lineTo(e+o,i+this.height),t.arcTo(e,i+this.height,e,i+this.height-o,o),t.lineTo(e,i+o),t.arcTo(e,i,e+o,i,o),t.closePath(),t.fill(),t.stroke()}drawRectangle(t){const e=this.x-this.width/2,i=this.y-this.height/2;t.fillRect(e,i,this.width,this.height),t.strokeRect(e,i,this.width,this.height)}drawDiamond(t){t.beginPath(),t.moveTo(this.x,this.y-this.height/2),t.lineTo(this.x+this.width/2,this.y),t.lineTo(this.x,this.y+this.height/2),t.lineTo(this.x-this.width/2,this.y),t.closePath(),t.fill(),t.stroke()}drawText(t){t.fillStyle=this.fontColor,t.font=`${this.fontSize}px Arial`,t.textAlign="center",t.textBaseline="middle";const e=this.text.split("\n"),i=1.2*this.fontSize,o=e.length*i,s=this.y-o/2+i/2;e.forEach((e,o)=>{t.fillText(e,this.x,s+o*i)})}drawConnectionPoints(t){const e=this.getConnectionPoints();for(let i of e)t.fillStyle="#000",t.strokeStyle="#fff",t.lineWidth=2,t.beginPath(),t.arc(i.x,i.y,8,0,2*Math.PI),t.fill(),t.stroke(),t.strokeStyle="#fff",t.lineWidth=2,t.lineCap="round",t.beginPath(),t.moveTo(i.x-4,i.y),t.lineTo(i.x+4,i.y),t.stroke(),t.beginPath(),t.moveTo(i.x,i.y-4),t.lineTo(i.x,i.y+4),t.stroke()}drawSelectionOutline(t){switch(t.strokeStyle="#2196F3",t.lineWidth=3,t.setLineDash([5,5]),this.type){case"start":case"end":this.drawRoundedSelectionOutline(t);break;case"decision":this.drawDiamondSelectionOutline(t);break;default:this.drawRectangleSelectionOutline(t)}t.setLineDash([])}drawRoundedSelectionOutline(t){const e=this.x-this.width/2,i=this.y-this.height/2,o=this.height/2;t.beginPath(),t.moveTo(e+o,i),t.lineTo(e+this.width-o,i),t.arcTo(e+this.width,i,e+this.width,i+o,o),t.lineTo(e+this.width,i+this.height-o),t.arcTo(e+this.width,i+this.height,e+this.width-o,i+this.height,o),t.lineTo(e+o,i+this.height),t.arcTo(e,i+this.height,e,i+this.height-o,o),t.lineTo(e,i+o),t.arcTo(e,i,e+o,i,o),t.closePath(),t.stroke()}drawDiamondSelectionOutline(t){t.beginPath(),t.moveTo(this.x,this.y-this.height/2-5),t.lineTo(this.x+this.width/2+5,this.y),t.lineTo(this.x,this.y+this.height/2+5),t.lineTo(this.x-this.width/2-5,this.y),t.closePath(),t.stroke()}drawRectangleSelectionOutline(t){t.strokeRect(this.x-this.width/2-5,this.y-this.height/2-5,this.width+10,this.height+10)}drawResizeHandles(t){const e=this.getResizeHandles();t.fillStyle="#2196F3",t.strokeStyle="#fff",t.lineWidth=2;for(let i of e)t.fillRect(i.x-4,i.y-4,8,8),t.strokeRect(i.x-4,i.y-4,8,8)}getFillColor(){return this.fillColor}}class Connection{constructor(t,e,i,o,s){this.id=t,this.fromNode=e,this.fromPort=i,this.toNode=o,this.toPort=s,this.selected=!1,this.waypoints=[]}getPortPosition(t,e){switch(e){case"top":return{x:t.x,y:t.y-t.height/2};case"right":return{x:t.x+t.width/2,y:t.y};case"bottom":return{x:t.x,y:t.y+t.height/2};case"left":return{x:t.x-t.width/2,y:t.y};default:return{x:t.x,y:t.y}}}isNearPoint(t,e,i=1,o=15){const s=o/i,n=this.getPathPoints();for(let i=0;i<n.length-1;i++){const o=n[i],r=n[i+1];if(this.pointToLineDistance(t,e,o.x,o.y,r.x,r.y)<s)return!0}return!1}distanceToPoint(t,e,i,o){return Math.sqrt((i-t)**2+(o-e)**2)}pointToLineDistance(t,e,i,o,s,n){const r=s-i,h=n-o,l=r*r+h*h;if(0===l)return Math.sqrt((t-i)*(t-i)+(e-o)*(e-o));let a=((t-i)*r+(e-o)*h)/l;a=Math.max(0,Math.min(1,a));const d=i+a*r,c=o+a*h;return Math.sqrt((t-d)*(t-d)+(e-c)*(e-c))}getPathPoints(){const t=this.getPortPosition(this.fromNode,this.fromPort),e=this.getPortPosition(this.toNode,this.toPort);return this.waypoints.length>0?[t,...this.waypoints,e]:this.calculateOrthogonalPath(t,e,this.fromPort,this.toPort)}calculateOrthogonalPath(t,e,i,o){const s=[t],n=Math.abs(t.y-e.y)<10,r=Math.abs(t.x-e.x)<10;if(n&&("left"===i||"right"===i)&&("left"===o||"right"===o))return s.push(e),s;if(r&&("top"===i||"bottom"===i)&&("top"===o||"bottom"===o))return s.push(e),s;const h=this.getPortDirection(i),l=this.getPortDirection(o);if(!("right"!==i&&"left"!==i||"top"!==o&&"bottom"!==o))return s.push({x:e.x,y:t.y}),s.push(e),s;if(!("top"!==i&&"bottom"!==i||"right"!==o&&"left"!==o))return s.push({x:t.x,y:e.y}),s.push(e),s;const a={x:t.x+30*h.x,y:t.y+30*h.y},d={x:e.x+30*l.x,y:e.y+30*l.y};if(s.push(a),"right"!==i&&"left"!==i||"right"!==o&&"left"!==o){if(!("top"!==i&&"bottom"!==i||"top"!==o&&"bottom"!==o)){const t=(a.y+d.y)/2;s.push({x:a.x,y:t}),s.push({x:d.x,y:t})}}else{const t=(a.x+d.x)/2;s.push({x:t,y:a.y}),s.push({x:t,y:d.y})}return s.push(d),s.push(e),s}getPortDirection(t){switch(t){case"top":return{x:0,y:-1};case"right":return{x:1,y:0};case"bottom":return{x:0,y:1};case"left":return{x:-1,y:0};default:return{x:0,y:0}}}draw(t,e=!1){t.save();const i=this.getPathPoints();t.strokeStyle="#000",t.lineWidth=e?3:2,t.setLineDash([]),t.beginPath(),t.moveTo(i[0].x,i[0].y);for(let e=1;e<i.length;e++)t.lineTo(i[e].x,i[e].y);t.stroke(),e&&this.waypoints.length>0&&(t.fillStyle="#2196F3",t.strokeStyle="#fff",t.lineWidth=2,this.waypoints.forEach(e=>{t.beginPath(),t.arc(e.x,e.y,5,0,2*Math.PI),t.fill(),t.stroke()})),t.restore()}}class Area{constructor(t,e,i,o,s,n="Section"){this.id=t,this.x1=Math.min(e,o),this.y1=Math.min(i,s),this.x2=Math.max(e,o),this.y2=Math.max(i,s),this.title=n,this.selected=!1,this.fillColor="rgba(33, 150, 243, 0.1)",this.outlineColor="#000",this.outlineWidth=1,this.titleBgColor="#000",this.titleTextColor="#FFFFFF"}get width(){return this.x2-this.x1}get height(){return this.y2-this.y1}containsPoint(t,e){return t>=this.x1&&t<=this.x2&&e>=this.y1&&e<=this.y2}isOnTitleBar(t,e){return t>=this.x1&&t<=this.x2&&e>=this.y1-30&&e<=this.y1}isOnResizeHandle(t,e,i=1){const o=this.getResizeHandles(),s=8/i;for(let i of o)if(Math.sqrt((t-i.x)**2+(e-i.y)**2)<s)return i;return null}getResizeHandles(){return[{x:this.x1,y:this.y1,position:"top-left"},{x:this.x2,y:this.y1,position:"top-right"},{x:this.x2,y:this.y2,position:"bottom-right"},{x:this.x1,y:this.y2,position:"bottom-left"},{x:(this.x1+this.x2)/2,y:this.y1,position:"top"},{x:this.x2,y:(this.y1+this.y2)/2,position:"right"},{x:(this.x1+this.x2)/2,y:this.y2,position:"bottom"},{x:this.x1,y:(this.y1+this.y2)/2,position:"left"}]}updateSettings(t){void 0!==t.title&&(this.title=t.title),void 0!==t.fillColor&&(this.fillColor=t.fillColor),void 0!==t.outlineColor&&(this.outlineColor=t.outlineColor),void 0!==t.titleBgColor&&(this.titleBgColor=t.titleBgColor)}getSettings(){return{title:this.title,fillColor:this.fillColor,outlineColor:this.outlineColor,titleBgColor:this.titleBgColor}}draw(t,e=!1){t.save(),t.fillStyle=this.fillColor,t.fillRect(this.x1,this.y1,this.width,this.height),t.strokeStyle=e?"#FF9800":this.outlineColor,t.lineWidth=e?3:this.outlineWidth,t.setLineDash(e?[5,5]:[]),t.strokeRect(this.x1,this.y1,this.width,this.height),t.setLineDash([]),t.fillStyle=this.titleBgColor,t.fillRect(this.x1,this.y1-30,this.width,30),t.fillStyle=this.titleTextColor,t.font="14px Arial",t.textAlign="left",t.textBaseline="middle",t.fillText(this.title,this.x1+10,this.y1-15),e&&this.drawResizeHandles(t),t.restore()}drawResizeHandles(t){const e=this.getResizeHandles();t.fillStyle="#FF9800",t.strokeStyle="#fff",t.lineWidth=2;for(let i of e)t.fillRect(i.x-4,i.y-4,8,8),t.strokeRect(i.x-4,i.y-4,8,8)}}class NodeSettingsDialog{constructor(t){this.canvas=t,this.dialog=null,this.currentNode=null,this.onSave=null,this.createDialog()}createDialog(){this.dialog=document.createElement("div"),this.dialog.className="flowchart-node-settings-dialog",this.dialog.style.cssText="\n      position: fixed;\n      background: white;\n      border: 2px solid #2196F3;\n      border-radius: 8px;\n      padding: 20px;\n      box-shadow: 0 4px 20px rgba(0,0,0,0.3);\n      z-index: 10000;\n      display: none;\n      min-width: 320px;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;\n    ",this.dialog.innerHTML='\n      <div style="margin-bottom: 15px;">\n        <h3 style="margin: 0 0 15px 0; color: #333; font-size: 16px; border-bottom: 2px solid #2196F3; padding-bottom: 8px;">\n          Node Settings\n        </h3>\n      </div>\n\n      <div style="margin-bottom: 12px;">\n        <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #555; font-size: 13px;">\n          Text (use Shift+Enter for line breaks):\n        </label>\n        <textarea id="node-text" rows="3" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 13px; font-family: Arial, sans-serif; resize: vertical;"></textarea>\n      </div>\n\n      <div style="margin-bottom: 12px;">\n        <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #555; font-size: 13px;">\n          Link (URL):\n        </label>\n        <input type="url" id="node-link" placeholder="https://example.com" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 13px;">\n      </div>\n\n      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px; margin-bottom: 12px;">\n        <div>\n          <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #555; font-size: 13px;">\n            Fill Color:\n          </label>\n          <div style="display: flex; gap: 5px; align-items: center;">\n            <input type="color" id="node-fill-color" style="width: 50px; height: 32px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">\n            <input type="text" id="node-fill-color-text" placeholder="#FFFFFF" style="flex: 1; padding: 6px; border: 1px solid #ddd; border-radius: 4px; font-size: 12px; font-family: monospace;">\n          </div>\n        </div>\n\n        <div>\n          <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #555; font-size: 13px;">\n            Font Color:\n          </label>\n          <div style="display: flex; gap: 5px; align-items: center;">\n            <input type="color" id="node-font-color" style="width: 50px; height: 32px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">\n            <input type="text" id="node-font-color-text" placeholder="#000000" style="flex: 1; padding: 6px; border: 1px solid #ddd; border-radius: 4px; font-size: 12px; font-family: monospace;">\n          </div>\n        </div>\n      </div>\n\n      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px; margin-bottom: 12px;">\n        <div>\n          <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #555; font-size: 13px;">\n            Font Size:\n          </label>\n          <input type="number" id="node-font-size" min="8" max="48" value="14" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 13px;">\n        </div>\n\n        <div>\n          <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #555; font-size: 13px;">\n            Outline Width:\n          </label>\n          <input type="number" id="node-outline-width" min="1" max="10" value="2" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 13px;">\n        </div>\n      </div>\n\n      <div style="margin-bottom: 15px;">\n        <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #555; font-size: 13px;">\n          Outline Color:\n        </label>\n        <div style="display: flex; gap: 5px; align-items: center;">\n          <input type="color" id="node-outline-color" style="width: 50px; height: 32px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">\n          <input type="text" id="node-outline-color-text" placeholder="#000000" style="flex: 1; padding: 6px; border: 1px solid #ddd; border-radius: 4px; font-size: 12px; font-family: monospace;">\n        </div>\n      </div>\n\n      <div style="display: flex; gap: 10px; justify-content: flex-end; margin-top: 20px; padding-top: 15px; border-top: 1px solid #eee;">\n        <button id="node-settings-cancel" style="padding: 8px 20px; border: 1px solid #ddd; background: white; border-radius: 4px; cursor: pointer; font-size: 13px; font-weight: 500; color: #666;">\n          Cancel\n        </button>\n        <button id="node-settings-save" style="padding: 8px 20px; border: none; background: #2196F3; color: white; border-radius: 4px; cursor: pointer; font-size: 13px; font-weight: 500;">\n          Save\n        </button>\n      </div>\n    ',document.body.appendChild(this.dialog),this.setupEventListeners()}setupEventListeners(){this.dialog.addEventListener("keydown",t=>{t.stopPropagation()}),this.dialog.addEventListener("keyup",t=>{t.stopPropagation()});const t=this.dialog.querySelector("#node-fill-color"),e=this.dialog.querySelector("#node-fill-color-text");t.addEventListener("input",t=>{e.value=t.target.value.toUpperCase()}),e.addEventListener("input",e=>{/^#[0-9A-F]{6}$/i.test(e.target.value)&&(t.value=e.target.value)});const i=this.dialog.querySelector("#node-font-color"),o=this.dialog.querySelector("#node-font-color-text");i.addEventListener("input",t=>{o.value=t.target.value.toUpperCase()}),o.addEventListener("input",t=>{/^#[0-9A-F]{6}$/i.test(t.target.value)&&(i.value=t.target.value)});const s=this.dialog.querySelector("#node-outline-color"),n=this.dialog.querySelector("#node-outline-color-text");s.addEventListener("input",t=>{n.value=t.target.value.toUpperCase()}),n.addEventListener("input",t=>{/^#[0-9A-F]{6}$/i.test(t.target.value)&&(s.value=t.target.value)}),this.dialog.querySelector("#node-settings-save").addEventListener("click",()=>{this.saveSettings()}),this.dialog.querySelector("#node-settings-cancel").addEventListener("click",()=>{this.hide()}),this.dialog.querySelector("#node-text").addEventListener("keydown",t=>{"Enter"!==t.key||t.shiftKey||(t.preventDefault(),this.saveSettings())})}show(t,e,i){this.currentNode=t,this.originalSettings={text:t.text,link:t.link,fillColor:t.fillColor,fontColor:t.fontColor,fontSize:t.fontSize,outlineColor:t.outlineColor,outlineWidth:t.outlineWidth};const o=t.getSettings();this.dialog.querySelector("#node-text").value=o.text,this.dialog.querySelector("#node-link").value=o.link||"",this.dialog.querySelector("#node-fill-color").value=o.fillColor,this.dialog.querySelector("#node-fill-color-text").value=o.fillColor.toUpperCase(),this.dialog.querySelector("#node-font-color").value=o.fontColor,this.dialog.querySelector("#node-font-color-text").value=o.fontColor.toUpperCase(),this.dialog.querySelector("#node-font-size").value=o.fontSize,this.dialog.querySelector("#node-outline-color").value=o.outlineColor,this.dialog.querySelector("#node-outline-color-text").value=o.outlineColor.toUpperCase(),this.dialog.querySelector("#node-outline-width").value=o.outlineWidth,this.dialog.style.display="block",this.positionDialog(e,i),setTimeout(()=>{const t=this.dialog.querySelector("#node-text");t.focus(),t.setSelectionRange(t.value.length,t.value.length)},10)}positionDialog(t,e){const i=this.dialog.getBoundingClientRect(),o=i.width,s=i.height,n=window.innerWidth,r=window.innerHeight;let h=t+20,l=e;h+o>n&&(h=t-o-20),h<10&&(h=10),l+s>r&&(l=r-s-10),l<10&&(l=10),this.dialog.style.left=`${h}px`,this.dialog.style.top=`${l}px`}saveSettings(){if(!this.currentNode)return;const t=this.dialog.querySelector("#node-text").value.trim();if(""===t)return alert("Text cannot be empty. Keeping original value."),void(this.dialog.querySelector("#node-text").value=this.originalSettings.text);const e=this.dialog.querySelector("#node-font-size").value.trim(),i=this.dialog.querySelector("#node-outline-width").value.trim();let o=parseInt(e);o=isNaN(o)||""===e?this.currentNode.fontSize:Math.max(8,Math.min(48,o));let s=parseInt(i);s=isNaN(s)||""===i?this.currentNode.outlineWidth:Math.max(1,Math.min(10,s));const n={text:t,link:this.dialog.querySelector("#node-link").value,fillColor:this.dialog.querySelector("#node-fill-color").value,fontColor:this.dialog.querySelector("#node-font-color").value,fontSize:o,outlineColor:this.dialog.querySelector("#node-outline-color").value,outlineWidth:s};this.currentNode.updateSettings(n),this.originalSettings=null,this.onSave&&this.onSave(this.currentNode,n),this.hide()}hide(){this.currentNode&&this.originalSettings&&(this.currentNode.updateSettings(this.originalSettings),this.canvas&&this.canvas.render&&this.canvas.render()),this.dialog.style.display="none",this.currentNode=null,this.originalSettings=null}destroy(){this.dialog&&this.dialog.parentNode&&this.dialog.parentNode.removeChild(this.dialog)}}class AreaSettingsDialog{constructor(t,e){this.onSave=t,this.onCancel=e,this.dialog=null,this.area=null}show(t,e,i){this.area=t,this.createDialog(e,i)}createDialog(t,e){this.dialog&&this.close(),this.dialog=document.createElement("div"),this.dialog.style.cssText="\n      position: fixed;\n      background: white;\n      border: 2px solid #2196F3;\n      border-radius: 8px;\n      padding: 20px;\n      box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n      z-index: 10000;\n      min-width: 300px;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;\n    ";const i=this.area.getSettings();this.dialog.innerHTML=`\n      <div style="margin-bottom: 20px;">\n        <h3 style="margin: 0 0 15px 0; color: #333; font-size: 18px;">Area Settings</h3>\n        \n        <div style="margin-bottom: 12px;">\n          <label style="display: block; margin-bottom: 5px; color: #555; font-size: 13px;">Title:</label>\n          <input type="text" id="areaTitle" value="${i.title}" \n                 style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;">\n        </div>\n\n        <div style="margin-bottom: 12px;">\n          <label style="display: block; margin-bottom: 5px; color: #555; font-size: 13px;">Fill Color:</label>\n          <div style="display: flex; gap: 8px; align-items: center;">\n            <input type="color" id="areaFillColorPicker" value="${this.rgbaToHex(i.fillColor)}"\n                   style="width: 50px; height: 35px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">\n            <input type="range" id="areaFillOpacity" min="0" max="100" value="${this.getOpacity(i.fillColor)}"\n                   style="flex: 1;">\n            <span id="areaFillOpacityValue" style="min-width: 40px; color: #555; font-size: 13px;">${this.getOpacity(i.fillColor)}%</span>\n          </div>\n        </div>\n\n        <div style="margin-bottom: 12px;">\n          <label style="display: block; margin-bottom: 5px; color: #555; font-size: 13px;">Outline Color:</label>\n          <input type="color" id="areaOutlineColor" value="${i.outlineColor}"\n                 style="width: 50px; height: 35px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">\n        </div>\n\n        <div style="margin-bottom: 12px;">\n          <label style="display: block; margin-bottom: 5px; color: #555; font-size: 13px;">Title Background:</label>\n          <input type="color" id="areaTitleBgColor" value="${i.titleBgColor}"\n                 style="width: 50px; height: 35px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">\n        </div>\n      </div>\n\n      <div style="display: flex; gap: 10px; justify-content: flex-end;">\n        <button id="areaCancelBtn" style="padding: 8px 16px; background: #f5f5f5; border: 1px solid #ddd; \n                border-radius: 4px; cursor: pointer; font-size: 14px;">Cancel</button>\n        <button id="areaSaveBtn" style="padding: 8px 16px; background: #2196F3; color: white; border: none; \n                border-radius: 4px; cursor: pointer; font-size: 14px;">Save</button>\n      </div>\n    `,document.body.appendChild(this.dialog);const o=this.dialog.getBoundingClientRect(),s=window.innerWidth,n=window.innerHeight;let r=t+20,h=e;r+o.width>s&&(r=t-o.width-20),r<10&&(r=10),h+o.height>n&&(h=n-o.height-10),h<10&&(h=10),this.dialog.style.left=r+"px",this.dialog.style.top=h+"px";const l=document.getElementById("areaFillOpacity"),a=document.getElementById("areaFillOpacityValue");l.addEventListener("input",()=>{a.textContent=l.value+"%"}),document.getElementById("areaSaveBtn").addEventListener("click",()=>{this.save()}),document.getElementById("areaCancelBtn").addEventListener("click",()=>{this.close(),this.onCancel&&this.onCancel()}),this.dialog.addEventListener("click",t=>{t.stopPropagation()}),setTimeout(()=>{document.addEventListener("click",this.handleOutsideClick)},100)}handleOutsideClick=t=>{this.dialog&&!this.dialog.contains(t.target)&&(this.close(),this.onCancel&&this.onCancel())};save(){const t=document.getElementById("areaTitle").value,e=document.getElementById("areaFillColorPicker").value,i=document.getElementById("areaFillOpacity").value/100,o=this.hexToRgba(e,i),s=document.getElementById("areaOutlineColor").value,n=document.getElementById("areaTitleBgColor").value;this.onSave&&this.onSave({title:t,fillColor:o,outlineColor:s,titleBgColor:n}),this.close()}close(){this.dialog&&(document.removeEventListener("click",this.handleOutsideClick),this.dialog.remove(),this.dialog=null)}rgbaToHex(t){const e=t.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/);return e?`#${parseInt(e[1]).toString(16).padStart(2,"0")}${parseInt(e[2]).toString(16).padStart(2,"0")}${parseInt(e[3]).toString(16).padStart(2,"0")}`:"#2196F3"}getOpacity(t){const e=t.match(/rgba?\([^,]+,[^,]+,[^,]+,?\s*([0-9.]+)?\)/);return e&&e[1]?Math.round(100*parseFloat(e[1])):100}hexToRgba(t,e){return`rgba(${parseInt(t.slice(1,3),16)}, ${parseInt(t.slice(3,5),16)}, ${parseInt(t.slice(5,7),16)}, ${e})`}}return{Canvas:class{constructor(t,e={}){if(this.container=document.getElementById(t),!this.container)throw new Error(`Container with id "${t}" not found`);this.options={mode:e.mode||"edit",pixelRatio:e.pixelRatio||window.devicePixelRatio||1,...e},this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d"),this.container.appendChild(this.canvas),this.nodes=[],this.connections=[],this.areas=[],this.selectedNode=null,this.selectedConnection=null,this.selectedArea=null,this.draggingNode=null,this.draggingArea=null,this.resizingNode=null,this.resizingArea=null,this.resizeHandle=null,this.connectingFrom=null,this.connectingTo=null,this.markingArea=!1,this.areaStart=null,this.areaEnd=null,this.panOffset={x:0,y:0},this.isPanning=!1,this.panStart={x:0,y:0},this.spacePressed=!1,this.zoom=1,this.history=[],this.historyIndex=-1,this.nodeIdCounter=1,this.connectionIdCounter=1,this.areaIdCounter=1,this.lastClickTime=0,this.lastClickNode=null,this.lastClickArea=null,this.doubleClickDelay=300,this.nodeSettingsDialog=new NodeSettingsDialog(this),this.nodeSettingsDialog.onSave=()=>{this.saveState(),this.render()},this.areaSettingsDialog=new AreaSettingsDialog(t=>{this.selectedArea&&(this.selectedArea.updateSettings(t),this.saveState(),this.render())},()=>{this.render()}),this.setupCanvas(),this.setupEventListeners(),this.saveState(),this.render()}setupCanvas(){const resizeCanvas=()=>{const t=this.container.getBoundingClientRect();this.canvas.width=t.width*this.options.pixelRatio,this.canvas.height=t.height*this.options.pixelRatio,this.canvas.style.width=t.width+"px",this.canvas.style.height=t.height+"px",this.ctx.scale(this.options.pixelRatio,this.options.pixelRatio),this.render()};resizeCanvas(),window.addEventListener("resize",resizeCanvas),this.canvas.style.display="block",this.canvas.style.touchAction="none"}setupEventListeners(){this.canvas.addEventListener("mousedown",this.handleMouseDown.bind(this)),this.canvas.addEventListener("mousemove",this.handleMouseMove.bind(this)),this.canvas.addEventListener("mouseup",this.handleMouseUp.bind(this)),this.canvas.addEventListener("wheel",this.handleWheel.bind(this)),this.canvas.addEventListener("contextmenu",t=>t.preventDefault()),document.addEventListener("keydown",this.handleKeyDown.bind(this)),document.addEventListener("keyup",this.handleKeyUp.bind(this))}getMousePos(t){const e=this.canvas.getBoundingClientRect(),i=this.canvas.width/this.options.pixelRatio/e.width,o=this.canvas.height/this.options.pixelRatio/e.height,s=(t.clientX-e.left)*i,n=(t.clientY-e.top)*o;return{x:(s-this.panOffset.x)/this.zoom,y:(n-this.panOffset.y)/this.zoom}}handleMouseDown(t){if("edit"!==this.options.mode)return;const e=this.getMousePos(t);if(1===t.button||2===t.button||0===t.button&&(t.ctrlKey||this.spacePressed))return this.isPanning=!0,this.panStart={x:t.clientX-this.panOffset.x,y:t.clientY-this.panOffset.y},void(this.canvas.style.cursor="grabbing");if(this.markingArea)this.areaStart={x:e.x,y:e.y};else{for(let t of[...this.areas].reverse()){const i=t.isOnResizeHandle(e.x,e.y,this.zoom);if(i&&t===this.selectedArea)return this.resizingArea=t,this.resizeHandle=i,void(this.resizeStart={x:e.x,y:e.y,x1:t.x1,y1:t.y1,x2:t.x2,y2:t.y2})}for(let i of[...this.areas].reverse())if(i.isOnTitleBar(e.x,e.y)){const o=Date.now(),s=o-this.lastClickTime;return this.lastClickArea===i&&s<this.doubleClickDelay?(this.openAreaSettings(i,t.clientX,t.clientY),this.lastClickTime=0,void(this.lastClickArea=null)):(this.lastClickTime=o,this.lastClickArea=i,this.selectedArea=i,this.selectedNode=null,this.selectedConnection=null,this.draggingArea=i,this.dragStart={x:e.x-i.x1,y:e.y-i.y1,width:i.width,height:i.height},void this.render())}for(let i of this.nodes){const o=i.isOnConnectionPoint(e.x,e.y,this.zoom);if(o)return this.connectingFrom={node:i,point:o},this.selectedNode=null,this.selectedConnection=null,this.selectedArea=null,void this.render();const s=i.isOnResizeHandle(e.x,e.y,this.zoom);if(s&&i===this.selectedNode)return this.resizingNode=i,this.resizeHandle=s,void(this.resizeStart={x:e.x,y:e.y,width:i.width,height:i.height});if(i.containsPoint(e.x,e.y)){const o=Date.now(),s=o-this.lastClickTime;return this.lastClickNode===i&&s<this.doubleClickDelay?(this.canvas.getBoundingClientRect(),this.openNodeSettings(i,t.clientX,t.clientY),this.lastClickTime=0,void(this.lastClickNode=null)):(this.lastClickTime=o,this.lastClickNode=i,this.selectedNode=i,this.selectedConnection=null,this.selectedArea=null,this.draggingNode=i,this.dragStart={x:e.x-i.x,y:e.y-i.y},void this.render())}}for(let t of this.connections)if(t.isNearPoint(e.x,e.y,this.zoom))return this.selectedConnection=t,this.selectedNode=null,this.selectedArea=null,void this.render();for(let t of[...this.areas].reverse())if(t.containsPoint(e.x,e.y))return this.selectedArea=t,this.selectedNode=null,this.selectedConnection=null,void this.render();this.selectedNode=null,this.selectedConnection=null,this.selectedArea=null,this.markingArea||(this.isPanning=!0,this.panStart={x:t.clientX-this.panOffset.x,y:t.clientY-this.panOffset.y},this.canvas.style.cursor="grabbing"),this.render()}}handleMouseMove(t){if("edit"!==this.options.mode)return;const e=this.getMousePos(t);if(this.markingArea&&this.areaStart)return this.areaEnd={x:e.x,y:e.y},void this.render();if(this.isPanning)return this.panOffset.x=t.clientX-this.panStart.x,this.panOffset.y=t.clientY-this.panStart.y,void this.render();if(this.connectingFrom){this.connectingTo=e,this.render();for(let t of this.nodes)if(t!==this.connectingFrom.node){const i=t.isOnConnectionPoint(e.x,e.y,this.zoom);if(i){this.connectingTo={node:t,point:i};break}}return}if(this.resizingArea){const t=e.x-this.resizeStart.x,i=e.y-this.resizeStart.y;switch(this.resizeHandle.position){case"top-left":this.resizingArea.x1=Math.min(this.resizeStart.x1+t,this.resizeStart.x2-50),this.resizingArea.y1=Math.min(this.resizeStart.y1+i,this.resizeStart.y2-50);break;case"top-right":this.resizingArea.x2=Math.max(this.resizeStart.x2+t,this.resizeStart.x1+50),this.resizingArea.y1=Math.min(this.resizeStart.y1+i,this.resizeStart.y2-50);break;case"bottom-right":this.resizingArea.x2=Math.max(this.resizeStart.x2+t,this.resizeStart.x1+50),this.resizingArea.y2=Math.max(this.resizeStart.y2+i,this.resizeStart.y1+50);break;case"bottom-left":this.resizingArea.x1=Math.min(this.resizeStart.x1+t,this.resizeStart.x2-50),this.resizingArea.y2=Math.max(this.resizeStart.y2+i,this.resizeStart.y1+50);break;case"top":this.resizingArea.y1=Math.min(this.resizeStart.y1+i,this.resizeStart.y2-50);break;case"right":this.resizingArea.x2=Math.max(this.resizeStart.x2+t,this.resizeStart.x1+50);break;case"bottom":this.resizingArea.y2=Math.max(this.resizeStart.y2+i,this.resizeStart.y1+50);break;case"left":this.resizingArea.x1=Math.min(this.resizeStart.x1+t,this.resizeStart.x2-50)}return void this.render()}if(this.draggingArea){const t=e.x-this.dragStart.x,i=e.y-this.dragStart.y;return this.draggingArea.x1=t,this.draggingArea.y1=i,this.draggingArea.x2=t+this.dragStart.width,this.draggingArea.y2=i+this.dragStart.height,void this.render()}if(this.resizingNode){const t=e.x-this.resizeStart.x,i=e.y-this.resizeStart.y;switch(this.resizeHandle.position){case"top-left":this.resizingNode.width=Math.max(60,this.resizeStart.width-2*t),this.resizingNode.height=Math.max(40,this.resizeStart.height-2*i);break;case"top-right":this.resizingNode.width=Math.max(60,this.resizeStart.width+2*t),this.resizingNode.height=Math.max(40,this.resizeStart.height-2*i);break;case"bottom-right":this.resizingNode.width=Math.max(60,this.resizeStart.width+2*t),this.resizingNode.height=Math.max(40,this.resizeStart.height+2*i);break;case"bottom-left":this.resizingNode.width=Math.max(60,this.resizeStart.width-2*t),this.resizingNode.height=Math.max(40,this.resizeStart.height+2*i)}return void this.render()}if(this.draggingNode)return this.draggingNode.x=e.x-this.dragStart.x,this.draggingNode.y=e.y-this.dragStart.y,void this.render();let i="default";if(this.spacePressed&&!this.isPanning)i="grab";else if(this.markingArea)i="crosshair";else{for(let t of this.areas){if(t===this.selectedArea&&t.isOnResizeHandle(e.x,e.y,this.zoom)){i="nwse-resize";break}if(t.isOnTitleBar(e.x,e.y)){i="move";break}}if("default"===i)for(let t of this.nodes){if(t.isOnConnectionPoint(e.x,e.y,this.zoom)){i="crosshair";break}if(t===this.selectedNode&&t.isOnResizeHandle(e.x,e.y,this.zoom)){i="nwse-resize";break}if(t.containsPoint(e.x,e.y)){i="move";break}}if("default"===i)for(let t of this.connections)if(t.isNearPoint(e.x,e.y,this.zoom)){i="pointer";break}"default"!==i||this.markingArea||(i="grab")}this.canvas.style.cursor=i}handleMouseUp(t){if("edit"===this.options.mode){if(this.markingArea&&this.areaStart&&this.areaEnd){const e=new Area("area_"+this.areaIdCounter++,this.areaStart.x,this.areaStart.y,this.areaEnd.x,this.areaEnd.y);return this.areas.push(e),this.selectedArea=e,this.markingArea=!1,this.areaStart=null,this.areaEnd=null,this.onAreaMarkingComplete&&this.onAreaMarkingComplete(),this.canvas.getBoundingClientRect(),this.areaSettingsDialog.show(e,t.clientX,t.clientY),this.saveState(),void this.render()}if(this.isPanning)return this.isPanning=!1,void(this.canvas.style.cursor="default");if(this.connectingFrom&&this.connectingTo){if(this.connectingTo.node){const t=this.connectingFrom.point.position,e=this.connectingTo.point.position;if(!this.connections.find(i=>i.fromNode===this.connectingFrom.node&&i.toNode===this.connectingTo.node&&i.fromPort===t&&i.toPort===e)){const i=new Connection("conn_"+this.connectionIdCounter++,this.connectingFrom.node,t,this.connectingTo.node,e);this.connections.push(i),this.saveState()}}return this.connectingFrom=null,this.connectingTo=null,void this.render()}this.draggingArea&&(this.saveState(),this.draggingArea=null),this.resizingArea&&(this.saveState(),this.resizingArea=null,this.resizeHandle=null),this.draggingNode&&(this.saveState(),this.draggingNode=null),this.resizingNode&&(this.saveState(),this.resizingNode=null,this.resizeHandle=null)}}handleWheel(t){t.preventDefault();const e=this.canvas.getBoundingClientRect(),i=(t.clientX-e.left)*(this.canvas.width/this.options.pixelRatio/e.width),o=(t.clientY-e.top)*(this.canvas.height/this.options.pixelRatio/e.height),s=(i-this.panOffset.x)/this.zoom,n=(o-this.panOffset.y)/this.zoom,r=t.deltaY<0?1.1:.9,h=Math.max(.1,Math.min(5,this.zoom*r));this.panOffset.x=i-s*h,this.panOffset.y=o-n*h,this.zoom=h,this.render()}handleKeyDown(t){if("edit"===this.options.mode){if("Space"===t.code&&!this.spacePressed)return t.preventDefault(),this.spacePressed=!0,void(this.draggingNode||this.draggingArea||this.resizingNode||this.resizingArea||(this.canvas.style.cursor="grab"));"Delete"!==t.key&&"Backspace"!==t.key||(this.selectedNode?(this.connections=this.connections.filter(t=>t.fromNode!==this.selectedNode&&t.toNode!==this.selectedNode),this.nodes=this.nodes.filter(t=>t!==this.selectedNode),this.selectedNode=null,this.saveState(),this.render()):this.selectedConnection?(this.connections=this.connections.filter(t=>t!==this.selectedConnection),this.selectedConnection=null,this.saveState(),this.render()):this.selectedArea&&(this.areas=this.areas.filter(t=>t!==this.selectedArea),this.selectedArea=null,this.saveState(),this.render())),!t.ctrlKey&&!t.metaKey||"z"!==t.key||t.shiftKey||(t.preventDefault(),this.undo()),(t.ctrlKey||t.metaKey)&&"z"===t.key&&t.shiftKey&&(t.preventDefault(),this.redo()),(t.ctrlKey||t.metaKey)&&"y"===t.key&&(t.preventDefault(),this.redo()),"Escape"===t.key&&this.markingArea&&(this.markingArea=!1,this.areaStart=null,this.areaEnd=null,this.canvas.style.cursor="default",this.onAreaMarkingComplete&&this.onAreaMarkingComplete(),this.render())}}handleKeyUp(t){"Space"===t.code&&(this.spacePressed=!1,this.isPanning||(this.canvas.style.cursor="default"))}addNode(t,e,i,o){const s=new Node("node_"+this.nodeIdCounter++,t,i,o,e);return this.nodes.push(s),this.saveState(),this.render(),s}startAreaMarking(){this.markingArea=!0,this.areaStart=null,this.areaEnd=null,this.selectedNode=null,this.selectedConnection=null,this.selectedArea=null,this.canvas.style.cursor="crosshair",this.render()}openAreaSettings(t,e,i){this.areaSettingsDialog.show(t,e,i)}openNodeSettings(t,e,i){this.nodeSettingsDialog.show(t,e,i)}saveState(){const t={nodes:this.nodes.map(t=>({id:t.id,type:t.type,x:t.x,y:t.y,text:t.text,width:t.width,height:t.height,link:t.link,fillColor:t.fillColor,fontColor:t.fontColor,fontSize:t.fontSize,outlineColor:t.outlineColor,outlineWidth:t.outlineWidth})),connections:this.connections.map(t=>({id:t.id,fromNodeId:t.fromNode.id,fromPort:t.fromPort,toNodeId:t.toNode.id,toPort:t.toPort})),areas:this.areas.map(t=>({id:t.id,x1:t.x1,y1:t.y1,x2:t.x2,y2:t.y2,title:t.title,fillColor:t.fillColor,outlineColor:t.outlineColor,titleBgColor:t.titleBgColor}))};this.history=this.history.slice(0,this.historyIndex+1),this.history.push(JSON.stringify(t)),this.historyIndex++,this.history.length>50&&(this.history.shift(),this.historyIndex--)}undo(){this.historyIndex>0&&(this.historyIndex--,this.restoreState(this.history[this.historyIndex]))}redo(){this.historyIndex<this.history.length-1&&(this.historyIndex++,this.restoreState(this.history[this.historyIndex]))}restoreState(t){const e=JSON.parse(t);this.nodes=e.nodes.map(t=>{const e=new Node(t.id,t.type,t.x,t.y,t.text);return e.width=t.width,e.height=t.height,e.link=t.link||"",e.fillColor=t.fillColor||"#FFFFFF",e.fontColor=t.fontColor||"#000000",e.fontSize=t.fontSize||14,e.outlineColor=t.outlineColor||"#000000",e.outlineWidth=t.outlineWidth||2,e}),this.connections=e.connections.map(t=>{const e=this.nodes.find(e=>e.id===t.fromNodeId),i=this.nodes.find(e=>e.id===t.toNodeId);return new Connection(t.id,e,t.fromPort,i,t.toPort)}),this.areas=(e.areas||[]).map(t=>{const e=new Area(t.id,t.x1,t.y1,t.x2,t.y2,t.title);return e.fillColor=t.fillColor||"rgba(33, 150, 243, 0.1)",e.outlineColor=t.outlineColor||"#2196F3",e.titleBgColor=t.titleBgColor||"#2196F3",e}),this.selectedNode=null,this.selectedConnection=null,this.selectedArea=null,this.render()}clear(){this.nodes=[],this.connections=[],this.areas=[],this.selectedNode=null,this.selectedConnection=null,this.selectedArea=null,this.history=[],this.historyIndex=-1,this.nodeIdCounter=1,this.connectionIdCounter=1,this.areaIdCounter=1,this.render()}drawGrid(){const t=20,e=this.canvas.width/this.options.pixelRatio/this.zoom,i=this.canvas.height/this.options.pixelRatio/this.zoom,o=Math.floor(-this.panOffset.x/this.zoom/t)*t,s=Math.floor(-this.panOffset.y/this.zoom/t)*t,n=o+e+t,r=s+i+t;this.ctx.strokeStyle="#e0e0e0",this.ctx.lineWidth=.5,this.ctx.beginPath();for(let e=o;e<n;e+=t)this.ctx.moveTo(e,s),this.ctx.lineTo(e,r);for(let e=s;e<r;e+=t)this.ctx.moveTo(o,e),this.ctx.lineTo(n,e);this.ctx.stroke()}render(){const t=this.canvas.width/this.options.pixelRatio,e=this.canvas.height/this.options.pixelRatio;if(this.ctx.clearRect(0,0,t,e),this.ctx.fillStyle="#ffffff",this.ctx.fillRect(0,0,t,e),this.ctx.save(),this.ctx.translate(this.panOffset.x,this.panOffset.y),this.ctx.scale(this.zoom,this.zoom),this.drawGrid(),this.areas.forEach(t=>{t.draw(this.ctx,t===this.selectedArea)}),this.markingArea&&this.areaStart&&this.areaEnd){const t=Math.min(this.areaStart.x,this.areaEnd.x),e=Math.min(this.areaStart.y,this.areaEnd.y),i=Math.max(this.areaStart.x,this.areaEnd.x),o=Math.max(this.areaStart.y,this.areaEnd.y);this.ctx.fillStyle="rgba(33, 150, 243, 0.1)",this.ctx.fillRect(t,e,i-t,o-e),this.ctx.strokeStyle="#2196F3",this.ctx.lineWidth=2,this.ctx.setLineDash([5,5]),this.ctx.strokeRect(t,e,i-t,o-e),this.ctx.setLineDash([])}this.connections.forEach(t=>{t.draw(this.ctx,t===this.selectedConnection)}),this.nodes.forEach(t=>{t.draw(this.ctx,t===this.selectedNode)}),this.connectingFrom&&this.connectingTo&&(this.ctx.strokeStyle="#2196F3",this.ctx.lineWidth=2,this.ctx.setLineDash([5,5]),this.ctx.beginPath(),this.ctx.moveTo(this.connectingFrom.point.x,this.connectingFrom.point.y),this.connectingTo.node?this.ctx.lineTo(this.connectingTo.point.x,this.connectingTo.point.y):this.ctx.lineTo(this.connectingTo.x,this.connectingTo.y),this.ctx.stroke(),this.ctx.setLineDash([])),this.ctx.restore()}exportToJSON(){const t={nodes:this.nodes.map(t=>({id:t.id,type:t.type,x:t.x,y:t.y,text:t.text,width:t.width,height:t.height,link:t.link,fillColor:t.fillColor,fontColor:t.fontColor,fontSize:t.fontSize,outlineColor:t.outlineColor,outlineWidth:t.outlineWidth})),connections:this.connections.map(t=>({id:t.id,fromNodeId:t.fromNode.id,fromPort:t.fromPort,toNodeId:t.toNode.id,toPort:t.toPort})),areas:this.areas.map(t=>({id:t.id,x1:t.x1,y1:t.y1,x2:t.x2,y2:t.y2,title:t.title,fillColor:t.fillColor,outlineColor:t.outlineColor,titleBgColor:t.titleBgColor}))};return JSON.stringify(t,null,2)}importFromJSON(t){const e=JSON.parse(t);this.nodes=e.nodes.map(t=>{const e=new Node(t.id,t.type,t.x,t.y,t.text);return e.width=t.width,e.height=t.height,e.link=t.link||"",e.fillColor=t.fillColor||"#FFFFFF",e.fontColor=t.fontColor||"#000000",e.fontSize=t.fontSize||14,e.outlineColor=t.outlineColor||"#000000",e.outlineWidth=t.outlineWidth||2,e}),this.connections=e.connections.map(t=>{const e=this.nodes.find(e=>e.id===t.fromNodeId),i=this.nodes.find(e=>e.id===t.toNodeId);return new Connection(t.id,e,t.fromPort,i,t.toPort)}),this.areas=(e.areas||[]).map(t=>{const e=new Area(t.id,t.x1,t.y1,t.x2,t.y2,t.title);return e.fillColor=t.fillColor||"rgba(33, 150, 243, 0.1)",e.outlineColor=t.outlineColor||"#2196F3",e.titleBgColor=t.titleBgColor||"#2196F3",e}),this.nodeIdCounter=Math.max(...this.nodes.map(t=>parseInt(t.id.split("_")[1])||0),0)+1,this.connectionIdCounter=Math.max(...this.connections.map(t=>parseInt(t.id.split("_")[1])||0),0)+1,this.areaIdCounter=Math.max(...this.areas.map(t=>parseInt(t.id.split("_")[1])||0),0)+1,this.saveState(),this.render()}exportToPNG(){const t=document.createElement("canvas"),e=t.getContext("2d");let i=1/0,o=1/0,s=-1/0,n=-1/0;this.areas.forEach(t=>{i=Math.min(i,t.x1),o=Math.min(o,t.y1-30),s=Math.max(s,t.x2),n=Math.max(n,t.y2)}),this.nodes.forEach(t=>{i=Math.min(i,t.x-t.width/2),o=Math.min(o,t.y-t.height/2),s=Math.max(s,t.x+t.width/2),n=Math.max(n,t.y+t.height/2)});const r=s-i+100,h=n-o+100;return t.width=r,t.height=h,e.fillStyle="#ffffff",e.fillRect(0,0,r,h),e.translate(50-i,50-o),this.areas.forEach(t=>t.draw(e,!1)),this.connections.forEach(t=>t.draw(e,!1)),this.nodes.forEach(t=>t.draw(e,!1)),t.toDataURL("image/png")}exportToPDF(){const{jsPDF:t}=window.jspdf,e=new t("l","pt","a4"),i=this.exportToPNG(),o=e.getImageProperties(i),s=e.internal.pageSize.getWidth(),n=o.height*s/o.width;return e.addImage(i,"PNG",0,0,s,n),e}async downloadZip(){if(void 0===t)return console.error("JSZip is not loaded"),void alert("JSZip library is required for this feature. Please include it in your HTML.");const e=new t;e.file("flowchart.json",this.exportToJSON());const i=this.exportToPNG(),o=await fetch(i).then(t=>t.blob());e.file("flowchart.png",o);const s=this.exportToPDF().output("blob");e.file("flowchart.pdf",s);const n=await e.generateAsync({type:"blob"}),r=URL.createObjectURL(n),h=document.createElement("a");h.href=r,h.download="flowchart.zip",h.click(),URL.revokeObjectURL(r)}destroy(){this.nodeSettingsDialog&&this.nodeSettingsDialog.destroy(),this.canvas&&this.canvas.parentNode&&this.canvas.parentNode.removeChild(this.canvas)}},Node:Node,Connection:Connection,Area:Area,NodeSettingsDialog:NodeSettingsDialog,AreaSettingsDialog:AreaSettingsDialog}});